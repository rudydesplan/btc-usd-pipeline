name: 'Terraform Workflow'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.9.5

permissions:
  contents: read
  pull-requests: write

jobs:
  # First job to set up the Terraform state backend infrastructure
  setup-backend:
    name: 'Setup Terraform State Backend'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3.1.2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init for Backend
      run: terraform init
      working-directory: ./terraform/state-backend

    - name: Terraform Apply for Backend
      run: |
        terraform apply -auto-approve
      working-directory: ./terraform/state-backend

  # The import step for pre-existing resources
  import-existing:
    name: 'Check and Import Pre-existing Resources'
    needs: setup-backend
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3.1.2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Import Pre-existing Resources
      run: |
        import_resource() {
          resource_type=$1
          resource_name=$2
          terraform_resource=$3
          provider_flag=$4
          region=$5
          
          if [ -n "$region" ]; then
            AWS_REGION_FLAG="--region $region"
          else
            AWS_REGION_FLAG=""
          fi
          
          if aws $AWS_REGION_FLAG $resource_type $resource_name > /dev/null 2>&1; then
            echo "Importing existing $resource_type: $resource_name"
            if [ -n "$provider_flag" ]; then
              terraform import $provider_flag $terraform_resource $resource_name
            else
              terraform import $terraform_resource $resource_name
            fi
            if [ $? -ne 0 ]; then
              echo "Failed to import $terraform_resource"
              exit 1
            fi
          else
            echo "$resource_type $resource_name does not exist, skipping import"
          fi
        }
        
        # Ensure Terraform is initialized in the correct directory (main terraform directory)
        terraform init -chdir=./terraform
        
        # Central Logging Bucket
        import_resource "s3api head-bucket --bucket" "terraform-central-logging-bucket-dsti" "aws_s3_bucket.central_logging_bucket"
        import_resource "s3api head-bucket --bucket" "terraform-central-logging-bucket-dsti" "aws_s3_bucket_versioning.central_logging_bucket_versioning"
        import_resource "s3api head-bucket --bucket" "terraform-central-logging-bucket-dsti" "aws_s3_bucket_server_side_encryption_configuration.central_logging_bucket_encryption"
        import_resource "s3api head-bucket --bucket" "terraform-central-logging-bucket-dsti" "aws_s3_bucket_lifecycle_configuration.central_logging_bucket_lifecycle"
        import_resource "s3api head-bucket --bucket" "terraform-central-logging-bucket-dsti" "aws_s3_bucket_public_access_block.central_logging_bucket_public_access_block"
        
        # Terraform State Bucket
        import_resource "s3api head-bucket --bucket" "terraform-state-bucket-dsti" "aws_s3_bucket.terraform_state_bucket"
        import_resource "s3api head-bucket --bucket" "terraform-state-bucket-dsti" "aws_s3_bucket_versioning.terraform_state_bucket_versioning"
        import_resource "s3api head-bucket --bucket" "terraform-state-bucket-dsti" "aws_s3_bucket_server_side_encryption_configuration.terraform_state_bucket_encryption"
        import_resource "s3api get-bucket-logging --bucket" "terraform-state-bucket-dsti" "aws_s3_bucket_logging.terraform_state_bucket_logging"
        import_resource "s3api head-bucket --bucket" "terraform-state-bucket-dsti" "aws_s3_bucket_lifecycle_configuration.terraform_state_bucket_lifecycle"
        import_resource "s3api get-bucket-replication --bucket" "terraform-state-bucket-dsti" "aws_s3_bucket_replication_configuration.terraform_state_bucket_replication"
        import_resource "s3api head-bucket --bucket" "terraform-state-bucket-dsti" "aws_s3_bucket_public_access_block.terraform_state_bucket_public_access_block"
        
        # Replication Bucket
        import_resource "s3api head-bucket --bucket" "terraform-state-replication-bucket-dsti" "aws_s3_bucket.replication_bucket" "-provider=aws.replication_region" "eu-north-1"
        import_resource "s3api head-bucket --bucket" "terraform-state-replication-bucket-dsti" "aws_s3_bucket_versioning.replication_bucket_versioning" "-provider=aws.replication_region" "eu-north-1"
        import_resource "s3api head-bucket --bucket" "terraform-state-replication-bucket-dsti" "aws_s3_bucket_server_side_encryption_configuration.replication_bucket_encryption" "-provider=aws.replication_region" "eu-north-1"
        import_resource "s3api get-bucket-logging --bucket" "terraform-state-replication-bucket-dsti" "aws_s3_bucket_logging.replication_bucket_logging" "-provider=aws.replication_region" "eu-north-1"
        import_resource "s3api head-bucket --bucket" "terraform-state-replication-bucket-dsti" "aws_s3_bucket_lifecycle_configuration.replication_bucket_lifecycle" "-provider=aws.replication_region" "eu-north-1"
        import_resource "s3api head-bucket --bucket" "terraform-state-replication-bucket-dsti" "aws_s3_bucket_public_access_block.replication_bucket_public_access_block" "-provider=aws.replication_region" "eu-north-1"
        
        # Replication Logging Bucket
        import_resource "s3api head-bucket --bucket" "terraform-replication-logging-bucket-dsti" "aws_s3_bucket.replication_logging_bucket" "-provider=aws.replication_region" "eu-north-1"
        import_resource "s3api head-bucket --bucket" "terraform-replication-logging-bucket-dsti" "aws_s3_bucket_versioning.replication_logging_bucket_versioning" "-provider=aws.replication_region" "eu-north-1"
        import_resource "s3api head-bucket --bucket" "terraform-replication-logging-bucket-dsti" "aws_s3_bucket_server_side_encryption_configuration.replication_logging_bucket_encryption" "-provider=aws.replication_region" "eu-north-1"
        import_resource "s3api head-bucket --bucket" "terraform-replication-logging-bucket-dsti" "aws_s3_bucket_lifecycle_configuration.replication_logging_bucket_lifecycle" "-provider=aws.replication_region" "eu-north-1"
        import_resource "s3api head-bucket --bucket" "terraform-replication-logging-bucket-dsti" "aws_s3_bucket_public_access_block.replication_logging_bucket_public_access_block" "-provider=aws.replication_region" "eu-north-1"
        
        # IAM Role for Replication
        import_resource "iam get-role --role-name" "s3-replication-role" "aws_iam_role.replication_role"
        import_resource "iam get-role-policy --role-name s3-replication-role --policy-name" "replication_policy" "aws_iam_role_policy.replication_policy" "" "" "s3-replication-role:replication_policy"

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TF_WORKING_DIR }}

  # The main infrastructure job, which applies the rest of the Terraform configuration
  terraform-main:
    name: 'Terraform Main Infrastructure'
    needs: [setup-backend, import-existing]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3.1.2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init for Main Infrastructure
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: ./terraform

    # Upload the Terraform plan to be used in the next job
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: ./terraform/tfplan
        retention-days: 5

  # Job to download the plan and apply it
  terraform-apply:
    name: 'Terraform Apply'
    needs: terraform-main
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Download the Terraform plan from the previous step
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ./terraform

      - name: Terraform Init for Apply
        run: terraform init
        working-directory: ./terraform

      # Apply the downloaded plan
      - name: Terraform Apply
        run: terraform apply -auto-approve ./terraform/tfplan
        working-directory: ./terraform

      - name: Terraform Output
        if: success()
        run: terraform output
        working-directory: ./terraform
